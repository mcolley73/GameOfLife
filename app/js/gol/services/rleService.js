gameOfLifeApp.service('rleService', ['$log', function($log){

  /*
  var gArray = [];
  gArray.push([]);
  gArray.push([]);
  gArray[0].push({alive:false});
  gArray[0].push({alive:true});
  gArray[1].push({alive:false});
  gArray[1].push({alive:false});
  glyphArrays.push({
    glyph: gArray,
    name: 'Simple Block 1'
  });
  */

  $log.info('rleService...');

  var rleService = {

    toGlyphArray: function(rleStrings){
      $log.info("toGlyphArray()...");

      var glyphArray = [];

      for(var index in rleStrings){
        $log.info('index ['+index+']');
        parseRleString(rleStrings[index], glyphArray);
      }

      return glyphArray;
    },

    fromGlyphArray: function(glyphArray){
      $log.info("fromGlyphArray()...");

      return createRlesFromGlyphArray(glyphArray);
    }

  };

  var meta = '';
  function parseRleString(rleString, glyphArray){
    if(rleString[0]!=='#'){
      if(rleString.trim().startsWith('x') || rleString.trim().startsWith('x =')){
        meta = parseMeta(rleString, glyphArray);
      }else{
        parseActual(rleString, glyphArray, meta);
      }
    }
  }

  function parseMeta(rleString, glyphArray){
    $log.info('meta: ' + rleString);
    var metaArray = rleString.split(',');
    $log.info(metaArray[1]);
    eval(metaArray[0]); // x dimension
    eval(metaArray[1]); // y dimension
    return {
      x: x,
      y: y
    }
  }

  function parseActual(rleString, glyphArray, meta){
    $log.info('rleString: ' + rleString)
    var rleRows = rleString.split('$');
    for(var rleRow in rleRows){
      var runStr = rleRows[rleRow];
      parseRunString(runStr, glyphArray, meta);
    }
  }

  function parseRunString(runStr, glyphArray, meta){
    $log.info('runStr: ' + runStr);
    var run;
    var glyphRow = [];
    for (var i = 0; i < runStr.length; i++){
      var currentChar = runStr[i];
      //$log.info('runChar: ' + currentChar);

      var runLength = '';
      while(isNumeric(currentChar)){
        runLength += currentChar;
        currentChar = runStr[++i];
      }

      if(isNumeric(runLength)){
        $log.info('runLength: [' + runLength + ']');
        for(var j = 0; j < parseInt(runLength); j++){
          pushCell(glyphRow, currentChar);
        }
      }else{
        $log.info('singleEntry:' + currentChar);
        pushCell(glyphRow, currentChar);
      }


    }
    while(glyphRow.length < meta.x){
      pushCell(glyphRow, 'b');
    }
    glyphArray.push(glyphRow);
  }

  function isNumeric(n) {
    return !isNaN(parseFloat(n)) && isFinite(n);
  }

  function pushCell(glyphRow, rleChar){
    if(rleChar==='b'){
      $log.info('pushing dead');
      glyphRow.push({alive:false});
    }else if(rleChar!=='!'){
      $log.info('pushing alive');
      glyphRow.push({alive:true});
    }
  }

  function createRlesFromGlyphArray(glyphArray){
    var rleStrings = [];

    rleStrings.push(buildOriginString());
    rleStrings.push(buildMetaString(glyphArray));
    buildRleStrings(glyphArray, rleStrings);

    return rleStrings;
  }

  function buildOriginString(){
    var originString = "#O generated by CGOL at "+new Date();
    $log.info(originString);
    return originString;
  }

  function buildMetaString(glyphArray){
    var metaString = 'x = ' + glyphArray[0].length;
    metaString += ', y = ' + glyphArray.length;
    $log.info(metaString);
    return metaString;
  }

  function buildRleStrings(glyphArray, rleStrings){
    var rleString = '';
    for(var i = 0; i < glyphArray.length; i++){
      rleString += buildRleStringForRow(glyphArray[i]);
      rleString += (i < glyphArray.length-1 ? '$' : '!');

      while(rleString.length > 70){
        rleStrings.push(rleString.substring(0,70));
        $log.info(rleStrings[rleStrings.length-1]);
        rleString = rleString.substring(70);
      }
    }
    $log.info(rleString);
    rleStrings.push(rleString);
  }

  function buildRleStringForRow(glyphRow){
    var rleString = '';
    for(var i = 0; i < glyphRow.length; i++){
      var currentGlyphState = glyphRow[i].alive;
      var count = 1;
      while((i < glyphRow.length-1) && currentGlyphState == glyphRow[i+1].alive){
        count++;
        i++;
      }

      if(i < glyphRow.length-1 || currentGlyphState){
        rleString += (count > 1) ? (''+count) : '';
        if(currentGlyphState){
          rleString += 'o';
        }else{
          rleString += 'b';
        }
      }
    }
    return rleString;
  }

  $log.info('rleService.');
  return rleService;

}]);
